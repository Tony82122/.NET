@page "/Posts"
@using ApiContracts.DTOs
@using BlazorApp1.HttpServices
@attribute [StreamRendering]
@inject IPostService PostService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Trending Posts</PageTitle>

@if (_loading)
{
    <p>Loading...</p>
}
else if (!_isAuthenticated)
{
    <p>You need to log in to view posts!</p>
    <button class="btn btn-primary" @onclick="NavigateToLogin">Go to Login</button>
}
else
{
    <h1>Trending Posts</h1>

    @if (_posts == null || !_posts.Any())
    {
        <p>No posts found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var post in _posts)
            {
                <div class="col-md-6 mb-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@post.Title</h5>
                            <p class="card-text">@post.Content</p>
                            <p class="card-text"><small class="text-muted">Created at: @post.CreatedAt.ToString("g")</small></p>
                            <p class="card-text">
                                <span class="badge bg-success">Upvotes: @post.UpVotes</span>
                                <span class="badge bg-danger">Downvotes: @post.DownVotes</span>
                            </p>
                            <p class="card-text"><small class="text-muted">User ID: @post.UserId</small></p>
                            @if (post.Comments != null && post.Comments.Any())
                            {
                                <h6>Comments:</h6>
                                <ul class="list-group list-group-flush">
                                    @foreach (var comment in post.Comments.Take(3))
                                    {
                                        <li class="list-group-item">
                                            <p>@comment.TextContent</p>
                                            <small class="text-muted">By User: @comment.UserId at @comment.CreatedAt.ToString("g")</small>
                                        </li>
                                    }
                                </ul>
                                @if (post.Comments.Count > 3)
                                {
                                    <p class="mt-2"><small>And @(post.Comments.Count - 3) more comments...</small></p>
                                }
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private List<postDTO> _posts;
    private bool _loading = true;
    private bool _isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        await CheckAuthenticationState();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await CheckAuthenticationState();
            StateHasChanged();
        }
    }

    private async Task CheckAuthenticationState()
    {
        _loading = true;
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        _isAuthenticated = user.Identity.IsAuthenticated;

        if (_isAuthenticated)
        {
            await LoadPosts();
        }
        else
        {
            _loading = false;
        }
    }

    private async Task LoadPosts()
    {
        try
        {
            _posts = await PostService.GetPostsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading posts: {ex.Message}");
            _posts = new List<postDTO>();
        }
        finally
        {
            _loading = false;
        }
    }

    private void NavigateToLogin()
    {
        NavManager.NavigateTo("/login");
    }
}