@page "/"
@using ApiContracts.DTOs
@using BlazorApp1.HttpServices
@using BlazorApp1.Auth
@using BlazorApp1.HttpEntities
@inject IPostService PostService
@inject NavigationManager NavMgr
@inject IAuthProvider AuthProvider

<PageTitle>Home</PageTitle>

<h1>Some sort of Reddit App</h1>

<AuthorizeView>
    <Authorized>
       
        <button @onclick="Logout">Logout</button>
        
        @if (posts != null && posts.Any())
        {
            <h2>Posts</h2>
            @foreach (var post in posts)
            {
                <div class="post">
                    <h3>@post.Title</h3>
                    <p>@post.Body</p>
                    <!-- Add more post details as needed -->
                </div>
            }
        }
        else
        {
            <p>Loading posts...</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You need to log in to view posts fam!</p>
        <button @onclick='() => NavMgr.NavigateTo("/login")'>Go to login</button>
    </NotAuthorized>
</AuthorizeView>
@code {
    private List<postDTO> posts;

    protected override async Task OnInitializedAsync()
    {
        await LoadPosts();
    }

    private async Task LoadPosts()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity.IsAuthenticated)
            {
                posts = await PostService.GetPostsAsync();
            }
            else
            {
                posts = new List<postDTO>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
            posts = new List<postDTO>();
        }
    }

    private async Task Logout()
    {
        await AuthProvider.Logout();
        NavMgr.NavigateTo("/login");
    }
}